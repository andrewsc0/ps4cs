summary(sample_means50)
sd(sample_means50)
sample_means10 <- rep(0, 5000)
sample_means100 <- rep(0, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
summary(sample_means10)
sd(sample_means10)
summary(sample_means50)
sd(sample_means50)
summary(sample_means100)
sd(sample_means100)
priceSample <- sample(price, 50)
hist(priceSample)
summary(priceSample)
sd(priceSample)
priceSample50<-rep(0,5000)
for(i in 1:5000){
samp<-sample(price,50)
priceSample50[i]<-mean(samp)
}
hist(priceSample50, breaks = 25)
summary(priceSample50)
sd(priceSample50)
priceSample150<-rep(0,5000)
for(i in 1:5000){
samp<-sample(price,150)
priceSample150[i]<-mean(samp)
}
hist(priceSample150, breaks = 25)
hist(priceSample150, breaks = 25)
summary(priceSample150)
sd(priceSample150)
hist(priceSample150, breaks = 25)
summary(priceSample150)
sd(priceSample150)
mean(price)
hist(samp2, breaks = 25)
summary(samp2)
sd(samp2)
sampW100 <- sample(area, 100)
sampW1000 <- sample(area, 1000)
hist(samp2, breaks = 25)
summary(samp2)
sd(samp2)
hist(sampW100, breaks = 25)
summary(sampW100)
sd(sampW100)
hist(sampW1000, breaks = 25)
summary(sampW1000)
sd(sampW1000)
hist(samp2, breaks = 25)
summary(samp2)
sd(samp2)
hist(sampW100)
summary(sampW100)
sd(sampW100)
hist(sampW1000)
summary(sampW1000)
sd(sampW1000)
hist(samp2, breaks = 25)
summary(samp2)
print("50")
sd(samp2)
hist(sampW100)
summary(sampW100)
print("100")
sd(sampW100)
hist(sampW1000)
summary(sampW1000)
print("1000")
sd(sampW1000)
knitr::opts_chunk$set(echo = TRUE)
set.seed(787)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
sd(area)
samp1 <- sample(area, 50)
summary(samp1)
sd(samp1)
hist(samp1)
mean(samp1)
samp2 <- sample(area, 50)
sampW100 <- sample(area, 100)
sampW1000 <- sample(area, 1000)
hist(samp2, breaks = 25)
summary(samp2)
print("50")
sd(samp2)
hist(sampW100)
summary(sampW100)
print("100")
sd(sampW100)
hist(sampW1000)
summary(sampW1000)
print("1000")
sd(sampW1000)
sample_means50 <- rep(0, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
summary(sample_means50)
sd(sample_means50)
sample_means10 <- rep(0, 5000)
sample_means100 <- rep(0, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
summary(sample_means10)
sd(sample_means10)
summary(sample_means50)
sd(sample_means50)
summary(sample_means100)
sd(sample_means100)
priceSample <- sample(price, 50)
hist(priceSample)
summary(priceSample)
sd(priceSample)
priceSample50<-rep(0,5000)
for(i in 1:5000){
samp<-sample(price,50)
priceSample50[i]<-mean(samp)
}
hist(priceSample50, breaks = 25)
summary(priceSample50)
sd(priceSample50)
priceSample150<-rep(0,5000)
for(i in 1:5000){
samp<-sample(price,150)
priceSample150[i]<-mean(samp)
}
hist(priceSample150, breaks = 25)
summary(priceSample150)
sd(priceSample150)
mean(price)
knitr::opts_chunk$set(echo = TRUE)
set.seed(787)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
sd(area)
samp1 <- sample(area, 50)
summary(samp1)
sd(samp1)
hist(samp1)
mean(samp1)
samp2 <- sample(area, 50)
sampW100 <- sample(area, 100)
sampW1000 <- sample(area, 1000)
hist(samp2, breaks = 25)
summary(samp2)
print("50")
sd(samp2)
hist(sampW100)
summary(sampW100)
print("100")
sd(sampW100)
hist(sampW1000)
summary(sampW1000)
print("1000")
sd(sampW1000)
sample_means50 <- rep(0, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
summary(sample_means50)
sd(sample_means50)
sample_means10 <- rep(0, 5000)
sample_means100 <- rep(0, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
summary(sample_means10)
sd(sample_means10)
summary(sample_means50)
sd(sample_means50)
summary(sample_means100)
sd(sample_means100)
priceSample <- sample(price, 50)
hist(priceSample)
summary(priceSample)
sd(priceSample)
priceSample50<-rep(0,5000)
for(i in 1:5000){
samp<-sample(price,50)
priceSample50[i]<-mean(samp)
}
hist(priceSample50, breaks = 25)
summary(priceSample50)
sd(priceSample50)
priceSample150<-rep(0,5000)
for(i in 1:5000){
samp<-sample(price,150)
priceSample150[i]<-mean(samp)
}
hist(priceSample150, breaks = 25)
summary(priceSample150)
sd(priceSample150)
mean(price)
knitr::opts_chunk$set(echo = TRUE)
set.seed(787)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile =
"ames.RData")
load("ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
hist(samp,breaks = 25)
summary(samp)
sd(samp)
sample_mean <- mean(samp)
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 2 * se
upper <- sample_mean + 2 * se
c(lower, upper)
summary(se)
lower <- 1491.553
upper <- 1772.880
summary(se)
lower
summary(samp)
boxplot(samp)
boxplot(samp)
shapiro.test(samp)
boxplot(samp)
shapiro.test(samp)
qqnorm(samp)
qqline(samp)
mean(population)
samp
boxplot(samp)
shapiro.test(samp)
qqnorm(samp, main = "QQ plot")
qqline(samp)
IQR(samp)
extremeHigh <- 1975 + (IQR(samp) * 3)
mildHigh <- 1975 + (IQR(samp) * 1.5)
IQR(samp)
extremeHigh <- 1975 + (IQR(samp) * 3)
mildHigh <- 1975 + (IQR(samp) * 1.5)
extremeLow <- 1168 - (IQR(samp) * 3)
mildLow <- 1168 - (IQR(samp) * 1.5)
IQR(samp)
extremeHigh <- 1975 + (IQR(samp) * 3)
mildHigh <- 1975 + (IQR(samp) * 1.5)
extremeLow <- 1168 - (IQR(samp) * 3)
mildLow <- 1168 - (IQR(samp) * 1.5)
extremeHigh
mildHigh
mildLow
extremeLow
IQR(samp)
extremeHigh <- 1975 + (IQR(samp) * 3)
mildHigh <- 1975 + (IQR(samp) * 1.5)
extremeLow <- 1168 - (IQR(samp) * 3)
mildLow <- 1168 - (IQR(samp) * 1.5)
IQR(samp)
extremeHigh
mildHigh
mildLow
extremeLow
IQR(samp)
extremeHigh <- 1975 + (IQR(samp) * 3)
mildHigh <- 1975 + (IQR(samp) * 1.5)
extremeLow <- 1168 - (IQR(samp) * 3)
mildLow <- 1168 - (IQR(samp) * 1.5)
extremeHigh
mildHigh
mildLow
extremeLow
boxplot(samp)
shapiro.test(samp)
qqnorm(samp, main = "QQ plot")
qqline(samp)
summary(samp)
boxplot(samp)
shapiro.test(samp)
qqnorm(samp, main = "QQ plot")
qqline(samp)
summary(samp)
IQR(samp)
extremeHigh <- 1975 + (IQR(samp) * 3)
mildHigh <- 1975 + (IQR(samp) * 1.5)
extremeLow <- 1168 - (IQR(samp) * 3)
mildLow <- 1168 - (IQR(samp) * 1.5)
extremeHigh
mildHigh
mildLow
extremeLow
mean(population)
43 * 0.95
43 * 0.95
mean(population)
43 * 0.95
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the
population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 2 * samp_sd/sqrt(n)
upper <- samp_mean + 2 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
qt(.99,59)
newMean <- rep(NA, 50)
sampSD <- rep(NA, 50)
num <- 60
for(i in 1:50){
newMean <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(samp) # save sample mean in ith element of samp_mean
sampSD[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- newMean - 2 * newSD/sqrt(num)
for(i in 1:50){
newMean <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(samp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
newMean <- rep(NA, 50)
newSD <- rep(NA, 50)
num <- 60
for(i in 1:50){
newMean <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(samp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- newMean - 2 * newSD/sqrt(num)
upper <- newMean + 2 * newSD/sqrt(num)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
plot_ci(lower, upper, mean(population))
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
c(newLower[1], newUpper[1])
plot_ci(newLower, newUpper, mean(population))
for(i in 1:50){
newSamp <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(newSamp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(newSamp) # save sample sd in ith element of samp_sd
}
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
c(newLower[1], newUpper[1])
plot_ci(newLower, newUpper, mean(population))
newMean <- rep(NA, 50)
newSD <- rep(NA, 50)
num <- 50
for(i in 1:50){
newSamp <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(newSamp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(newSamp) # save sample sd in ith element of samp_sd
}
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
c(newLower[1], newUpper[1])
plot_ci(newLower, newUpper, mean(population))
newMean <- rep(NA, 50)
newSD <- rep(NA, 50)
num <- 60
for(i in 1:50){
newSamp <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(newSamp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(newSamp) # save sample sd in ith element of samp_sd
}
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
c(newLower[1], newUpper[1])
c(newLower[1], newUpper[1])
plot_ci(newLower, newUpper, mean(population))
set.seed(787)
newMean <- rep(NA, 50)
newSD <- rep(NA, 50)
num <- 60
set.seed(787)
for(i in 1:50){
newSamp <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(newSamp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(newSamp) # save sample sd in ith element of samp_sd
}
set.seed(787)
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
set.seed(787)
c(newLower[1], newUpper[1])
set.seed(787)
plot_ci(newLower, newUpper, mean(population))
set.seed(787)
plot_ci(newLower, newUpper, mean(population))
set.seed(787)
for(i in 1:50){
newSamp <- sample(population, num) # obtain a sample of size n = 60 from the
population
newMean[i] <- mean(newSamp) # save sample mean in ith element of samp_mean
newSD[i] <- sd(newSamp) # save sample sd in ith element of samp_sd
}
set.seed(787)
newLower <- newMean - 2 * newSD/sqrt(num)
newUpper <- newMean + 2 * newSD/sqrt(num)
set.seed(787)
c(newLower[1], newUpper[1])
set.seed(787)
plot_ci(newLower, newUpper, mean(population))
set.seed(787)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
set.seed(787)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
set.seed(787)
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the
population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
set.seed(787)
lower <- samp_mean - 2 * samp_sd/sqrt(n)
upper <- samp_mean + 2 * samp_sd/sqrt(n)
set.seed(787)
c(lower[1], upper[1])
set.seed(787)
c(lower[1], upper[1])
set.seed(787)
plot_ci(lower, upper, mean(population))
plot_ci(lower, upper, mean(population))
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
set.seed(787)
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the
population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 2 * samp_sd/sqrt(n)
upper <- samp_mean + 2 * samp_sd/sqrt(n)
lower <- samp_mean - 2 * samp_sd/sqrt(n)
upper <- samp_mean + 2 * samp_sd/sqrt(n)
c(lower[1], upper[1])
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the
population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 2 * samp_sd/sqrt(n)
upper <- samp_mean + 2 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the
population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 2 * samp_sd/sqrt(n)
upper <- samp_mean + 2 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
